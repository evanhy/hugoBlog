<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>axios on Huyu&#39;s Blog</title>
    <link>https://www.huyu6.top/tags/axios/</link>
    <description>Recent content in axios on Huyu&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 19 Oct 2022 10:02:46 +0000</lastBuildDate><atom:link href="https://www.huyu6.top/tags/axios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何优雅处理 async await 错误</title>
      <link>https://www.huyu6.top/post/20.%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%A4%84%E7%90%86-async-await-%E9%94%99%E8%AF%AF/</link>
      <pubDate>Wed, 19 Oct 2022 10:02:46 +0000</pubDate>
      
      <guid>https://www.huyu6.top/post/20.%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%A4%84%E7%90%86-async-await-%E9%94%99%E8%AF%AF/</guid>
      <description>借用 await-to-js 库 https://github.com/scopsy/await-to-js https://blog.grossman.io/how-to-write-async-await-without-try-catch-blocks-in-javascript/ 之前处理异步请求时是这样的： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 async asyncTask() { try { const asyncFuncARes = await asyncFuncA() } catch(error) { return new Error(error) } try { const asyncFuncBRes = await asyncFuncB(asyncFuncARes) } catch(error) { return new Error(error) } try {</description>
    </item>
    
  </channel>
</rss>
